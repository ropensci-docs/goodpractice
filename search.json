[{"path":"https://docs.ropensci.org/goodpractice/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Ascent Digital Services UK Limited Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/goodpractice/articles/custom_checks.html","id":"whats-happening-inside-of-gp","dir":"Articles","previous_headings":"","what":"What’s happening inside of gp()?","title":"Custom Checks","text":"gp() function essentially carries two types steps: First, runs preparation steps checks, calculating test coverage cyclomatic complexity. carries checks, e.g., cyclomatic complexity exceeds threshold. results preparation steps checks added return object, also referred state. print method accesses check results prints advice failed checks - praise none fail.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/goodpractice/articles/custom_checks.html","id":"checks-without-corresponding-preparation-steps","dir":"Articles","previous_headings":"Writing custom checks","what":"Checks without corresponding preparation steps","title":"Custom Checks","text":"Custom checks can created make_check() function. inputs takes short description check, check , gp advice given case check fails. illustrate , let’s use simplified version check T F instead TRUE FALSE. check argument function takes state input carries check, returning TRUE check successful. state includes path source code package checkTnF() function tools package can used check T F used. Additional checks can used gp() via extra_checks argument. named list check objects returned make_check() function. checks carried , regardless whether provided goodpractice package custom checks, must named checks argument gp(). check T/F implemented package gives helpful advice simplified version returns files contain T F let’s quick comparison run versions:","code":"library(goodpractice)  # make a simple version of the T/F check check_simple_tf <- make_check(      description = \"TRUE and FALSE is used, not T and F\",   gp = \"avoid 'T' and 'F', use 'TRUE' and 'FALSE' instead.\",   check = function(state) {       length(tools::checkTnF(dir = state$path)) == 0   } ) # get path to example package pkg_path <- system.file(\"bad1\", package = \"goodpractice\") gp(pkg_path, checks = c(\"simple_tf\", \"truefalse_not_tf\"),    extra_checks = list(simple_tf = check_simple_tf)) #> ── GP badpackage ─────────────────────────────────────────────────────────────── #>  #> It is good practice to #>  #>   ✖ avoid 'T' and 'F', use 'TRUE' and 'FALSE' instead. #>   ✖ avoid 'T' and 'F', as they are just variables which are set to the logicals #>     'TRUE' and 'FALSE' by default, but are not reserved words and hence can be #>     overwritten by the user.  Hence, one should always use 'TRUE' and 'FALSE' #>     for the logicals. #>  #>     R/tf.R #>     R/tf.R #>     R/tf.R #>     R/tf.R #>     R/tf.R #>     ... and 4 more lines #>  #> ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://docs.ropensci.org/goodpractice/articles/custom_checks.html","id":"including-a-preparation-step","dir":"Articles","previous_headings":"Writing custom checks","what":"Including a preparation step","title":"Custom Checks","text":"Including preparation step optional can helpful several checks require preparations upfront. following example check two different fields present DESCRIPTION file, URL field BugReports field. checks can carried easily building preparation step desc package handling DESCRIPTION files. checks linked preparation via prep name: appears name argument make_prep(), preps argument make_check() finally name list extra_preps argument gp(). examples using custom checks can found rOpenSci unconf 2017 project checkers automated checking best practices research compendia.","code":"# prep: process DESCRIPTION file desc_fun <- function(path, quiet) {   desc::description$new(path) }  prep_desc <- make_prep(name = \"desc\", func = desc_fun)  # check for an URL field check_url <- make_check(   description = \"URL field in DESCRIPTION\",   preps = \"desc\",   gp = \"have a URL field in DESCRIPTION\",   check = function(state) state$desc$has_fields(\"URL\") )  # check for a BugReport field check_bugreports <- make_check(   description = \"BugReports in DESCRIPTION\",   preps = \"desc\",   gp = \"add a BugReports field to DESCRIPTION\",   check = function(state) state$desc$has_fields('BugReports') )  # run the two checks with their corresponding prep step gp(pkg_path, checks = c(\"url\", \"bugreports\"),    extra_preps = list(\"desc\" = prep_desc),    extra_checks = list(\"url\" = check_url, \"bugreports\" = check_bugreports)) #> ℹ Preparing: desc #> ── GP badpackage ─────────────────────────────────────────────────────────────── #>  #> It is good practice to #>  #>   ✖ have a URL field in DESCRIPTION #>   ✖ add a BugReports field to DESCRIPTION #> ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://docs.ropensci.org/goodpractice/articles/goodpractice.html","id":"whats-it-for","dir":"Articles","previous_headings":"","what":"What’s it for?","title":"goodpractice","text":"Building R package great way encapsulating code, documentation data single testable easily distributable unit. package distributed via CRAN, needs pass set checks implemented R CMD check, : minimal documentation, e.g., arguments exported functions documented? dependencies declared? checks helpful developing solid R package don’t check several good practices. example, package need contain tests good practice include . Following coding standard helps readability. Avoiding overly complex functions reduces risk bugs. Including URL bug reports lets people easily report bugs find . Tools automatically checking several aspects already exist goodpractice package bundles checks rcmdcheck code coverage covr package, source code linting via lintr package cyclomatic complexity via cyclocomp package augments checks good practice R package development avoiding T F favour TRUE FALSE. provides advice practices follow avoid. can use goodpractice checks reminder colleagues - custom checks run, can make goodpractice run well! Please see vignette “Custom Checks” details.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/goodpractice/articles/goodpractice.html","id":"main-function","dir":"Articles","previous_headings":"Good practice out of the box","what":"Main function","title":"goodpractice","text":"main function goodpractice() alias gp() takes path source code package first argument. goodpractice package contains source simple package violates good practices. ’ll use examples. package, ’ve done things DESCRIPTION file reasons , unnecessary trailing semicolons code used T F TRUE FALSE. output gp() tells isn’t considered good practice ’s R code, points location faux-pas. general, messages supposed point might want avoid also . example tries run 230 checks available, see full list use all_checks(). want run subset checks, e.g., one URL field DESCRIPTION, can specify checks name:","code":"library(goodpractice)  # get path to example package pkg_path <- system.file(\"bad1\", package = \"goodpractice\")  # run gp() on it g <- gp(pkg_path) #> ℹ Preparing: covr #> Warning in MYPREPS[[prep]](state, quiet = quiet): Prep step for test coverage #> failed. #> ℹ Preparing: cyclocomp #> ── R CMD build ───────────────────────────────────────────────────────────────── #> * checking for file ‘/tmp/Rtmpgx7xOK/remotes9d858121696/badpackage/DESCRIPTION’ ... OK #> * preparing ‘badpackage’: #> * checking DESCRIPTION meta-information ... OK #> * checking vignette meta-information ... OK #> * checking for LF line-endings in source and make files and shell scripts #> * checking for empty or unneeded directories #> * building ‘badpackage_1.0.0.tar.gz’ #> ℹ Preparing: description #> ℹ Preparing: lintr #> ℹ Preparing: namespace #> ℹ Preparing: rcmdcheck  # show the result g #> ── GP badpackage ─────────────────────────────────────────────────────────────── #>  #> It is good practice to #>  #>   ✖ not use \"Depends\" in DESCRIPTION, as it can cause name clashes, and poor #>     interaction with other packages. Use \"Imports\" instead. #>   ✖ omit \"Date\" in DESCRIPTION. It is not required and it gets invalid quite #>     often. A build date will be added to the package when you perform `R CMD #>     build` on it. #>   ✖ add a \"URL\" field to DESCRIPTION. It helps users find information about #>     your package online. If your package does not have a homepage, add an URL #>     to GitHub, or the CRAN package package page. #>   ✖ add a \"BugReports\" field to DESCRIPTION, and point it to a bug tracker. #>     Many online code hosting services provide bug trackers for free, #>     https://github.com, https://gitlab.com, etc. #>   ✖ omit trailing semicolons from code lines. They are not needed and most R #>     coding standards forbid them #>  #>     R/semicolons.R:4:30 #>     R/semicolons.R:5:29 #>     R/semicolons.R:9:38 #>  #>   ✖ not import packages as a whole, as this can cause name clashes between the #>     imported packages, especially over time as packages change. Instead, import #>     only the specific functions you need. #>   ✖ fix this R CMD check ERROR: VignetteBuilder package not declared: ‘knitr’ #>     See section ‘The DESCRIPTION file’ in the ‘Writing R Extensions’ manual. #>   ✖ avoid 'T' and 'F', as they are just variables which are set to the logicals #>     'TRUE' and 'FALSE' by default, but are not reserved words and hence can be #>     overwritten by the user.  Hence, one should always use 'TRUE' and 'FALSE' #>     for the logicals. #>  #>     R/tf.R #>     R/tf.R #>     R/tf.R #>     R/tf.R #>     R/tf.R #>     ... and 4 more lines #>  #> ──────────────────────────────────────────────────────────────────────────────── # what is the name of the check? grep(\"url\", all_checks(), value = TRUE) #> [1] \"description_url\"  # run only this check g_url <- gp(pkg_path, checks = \"description_url\") #> ℹ Preparing: description  g_url #> ── GP badpackage ─────────────────────────────────────────────────────────────── #>  #> It is good practice to #>  #>   ✖ add a \"URL\" field to DESCRIPTION. It helps users find information about #>     your package online. If your package does not have a homepage, add an URL #>     to GitHub, or the CRAN package package page. #> ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://docs.ropensci.org/goodpractice/articles/goodpractice.html","id":"doing-more-than-just-printing","dir":"Articles","previous_headings":"Good practice out of the box","what":"Doing more than just printing","title":"goodpractice","text":"Apart printing goodPractice object returned gp() access advice, can also access checks carried failed: access checks carried results data frame, use results() goodPractice object. Note code coverage calculated. corresponding check show failed checks (carried ) result NA. also possible export results JSON file export_json().","code":"# which checks were carried out? checks(g_url) #> [1] \"description_url\"  # which checks failed? failed_checks(g) #> [1] \"no_description_depends\"                 #> [2] \"no_description_date\"                    #> [3] \"description_url\"                        #> [4] \"description_bugreports\"                 #> [5] \"lintr_semicolon_linter\"                 #> [6] \"no_import_package_as_a_whole\"           #> [7] \"rcmdcheck_package_dependencies_present\" #> [8] \"truefalse_not_tf\" # show the first 5 checks carried out and their results results(g)[1:5,] #>                    check result #> 1                   covr     NA #> 2              cyclocomp   TRUE #> 3 no_description_depends  FALSE #> 4    no_description_date  FALSE #> 5        description_url  FALSE"},{"path":"https://docs.ropensci.org/goodpractice/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer. Ascent Digital Services UK Limited. Copyright holder.           MangoTheCat Karina Marks. Author.           KarinaMarks Daniel de Bortoli. Author.           ddbortoli Gabor Csardi. Author. Hannah Frick. Author. Owen Jones. Author.           owenjonesuob Hannah Alexander. Author. Ana Simmons. Contributor.           anasimmons Fabian Scheipl. Contributor.           fabian-s","code":""},{"path":"https://docs.ropensci.org/goodpractice/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padgham M, Marks K, de Bortoli D, Csardi G, Frick H, Jones O, Alexander H (2025). goodpractice: Advice R Package Building. R package version 1.0.5.9000, https://github.com/ropensci-review-tools/goodpractice, https://docs.ropensci.org/goodpractice/.","code":"@Manual{,   title = {goodpractice: Advice on R Package Building},   author = {Mark Padgham and Karina Marks and Daniel {de Bortoli} and Gabor Csardi and Hannah Frick and Owen Jones and Hannah Alexander},   year = {2025},   note = {R package version 1.0.5.9000, https://github.com/ropensci-review-tools/goodpractice},   url = {https://docs.ropensci.org/goodpractice/}, }"},{"path":[]},{"path":"https://docs.ropensci.org/goodpractice/index.html","id":"advice-on-r-package-building","dir":"","previous_headings":"","what":"Advice on R Package Building","title":"Advice on R Package Building","text":"Give advice good practices building R packages. Advice includes functions syntax avoid, package structure, code complexity, code formatting, etc.","code":""},{"path":"https://docs.ropensci.org/goodpractice/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Advice on R Package Building","text":"can install release version CRAN development version GitHub","code":"install.packages(\"goodpractice\") pak::pak(\"ropensci-review-tools/goodpractice\")"},{"path":"https://docs.ropensci.org/goodpractice/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Advice on R Package Building","text":"","code":"library(goodpractice) gp(\"<my-package>\")"},{"path":"https://docs.ropensci.org/goodpractice/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Advice on R Package Building","text":"","code":"library(goodpractice) # use example package contained in the goodpractice package pkg_path <- system.file(\"bad1\", package = \"goodpractice\") g <- gp(pkg_path) #> ── R CMD build ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── #>      checking for file ‘/tmp/Rtmpoq5BBi/remotes9dcd65cdcc55/badpackage/DESCRIPTION’ ...  ✔  checking for file ‘/tmp/Rtmpoq5BBi/remotes9dcd65cdcc55/badpackage/DESCRIPTION’ #>   ─  preparing ‘badpackage’: #>    checking DESCRIPTION meta-information ...  ✔  checking DESCRIPTION meta-information #>      checking vignette meta-information ...  ✔  checking vignette meta-information #>   ─  checking for LF line-endings in source and make files and shell scripts (400ms) #>   ─  checking for empty or unneeded directories #> ─  building ‘badpackage_1.0.0.tar.gz’ #>       #> g #> ── GP badpackage ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  #> It is good practice to #>  #>   ✖ not use \"Depends\" in DESCRIPTION, as it can cause name clashes, and poor interaction with other packages. Use \"Imports\" instead. #>   ✖ omit \"Date\" in DESCRIPTION. It is not required and it gets invalid quite often. A build date will be added to the package when you #>     perform `R CMD build` on it. #>   ✖ add a \"URL\" field to DESCRIPTION. It helps users find information about your package online. If your package does not have a #>     homepage, add an URL to GitHub, or the CRAN package package page. #>   ✖ add a \"BugReports\" field to DESCRIPTION, and point it to a bug tracker. Many online code hosting services provide bug trackers for #>     free, https://github.com, https://gitlab.com, etc. #>   ✖ omit trailing semicolons from code lines. They are not needed and most R coding standards forbid them #>  #>     'R/semicolons.R:4:30' #>     'R/semicolons.R:5:29' #>     'R/semicolons.R:9:38' #>  #>   ✖ not import packages as a whole, as this can cause name clashes between the imported packages. Instead, import only the specific #>     functions you need. #>   ✖ fix this R CMD check ERROR: VignetteBuilder package not declared: ‘knitr’ See section ‘The DESCRIPTION file’ in the ‘Writing R #>     Extensions’ manual. #>   ✖ avoid 'T' and 'F', as they are just variables which are set to the logicals 'TRUE' and 'FALSE' by default, but are not reserved #>     words and hence can be overwritten by the user.  Hence, one should always use 'TRUE' and 'FALSE' for the logicals. #>  #>     'R/tf.R' #>     'R/tf.R' #>     'R/tf.R' #>     'R/tf.R' #>     'R/tf.R' #>     ... and 4 more lines #>  #> ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── # show all available checks # all_checks()  # run only a specific check g_url <- gp(pkg_path, checks = \"description_url\") g_url #> ── GP badpackage ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  #> It is good practice to #>  #>   ✖ add a \"URL\" field to DESCRIPTION. It helps users find information about your package online. If your package does not have a #>     homepage, add an URL to GitHub, or the CRAN package package page. #> ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── # which checks were carried out? checks(g_url) #> [1] \"description_url\" # which checks failed? failed_checks(g) #> [1] \"no_description_depends\"                 #> [2] \"no_description_date\"                    #> [3] \"description_url\"                        #> [4] \"description_bugreports\"                 #> [5] \"lintr_semicolon_linter\"                 #> [6] \"no_import_package_as_a_whole\"           #> [7] \"rcmdcheck_package_dependencies_present\" #> [8] \"truefalse_not_tf\" # show the first 5 checks carried out and their results results(g)[1:5,] #>                    check result #> 1                   covr     NA #> 2              cyclocomp   TRUE #> 3 no_description_depends  FALSE #> 4    no_description_date  FALSE #> 5        description_url  FALSE"},{"path":"https://docs.ropensci.org/goodpractice/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Advice on R Package Building","text":"MIT © 2024 rOpenSci","code":""},{"path":"https://docs.ropensci.org/goodpractice/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Advice on R Package Building","text":"contributions project gratefully acknowledged using allcontributors package following -contributors specification. Contributions kind welcome!","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/goodpractice/reference/all_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"List the names of all checks — all_checks","title":"List the names of all checks — all_checks","text":"List names checks","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/all_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the names of all checks — all_checks","text":"","code":"all_checks()"},{"path":"https://docs.ropensci.org/goodpractice/reference/all_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the names of all checks — all_checks","text":"Character vector checks","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/checks.html","id":null,"dir":"Reference","previous_headings":"","what":"List all checks performed — checks","title":"List all checks performed — checks","text":"List checks performed","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all checks performed — checks","text":"","code":"checks(gp)"},{"path":"https://docs.ropensci.org/goodpractice/reference/checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all checks performed — checks","text":"gp gp output.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all checks performed — checks","text":"Character vector check names.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/goodpractice/reference/checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all checks performed — checks","text":"","code":"path <- system.file(\"bad1\", package = \"goodpractice\") # run a subset of all checks available g <- gp(path, checks = all_checks()[3:16]) #> ℹ Preparing: description #> ℹ Preparing: lintr #> ℹ Preparing: namespace checks(g) #>  [1] \"no_description_depends\"       \"no_description_date\"          #>  [3] \"description_url\"              \"description_bugreports\"       #>  [5] \"lintr_assignment_linter\"      \"lintr_line_length_linter\"     #>  [7] \"lintr_semicolon_linter\"       \"lintr_attach_detach_linter\"   #>  [9] \"lintr_setwd_linter\"           \"lintr_sapply_linter\"          #> [11] \"lintr_library_require_linter\" \"lintr_seq_linter\"             #> [13] \"no_import_package_as_a_whole\" \"no_export_pattern\""},{"path":"https://docs.ropensci.org/goodpractice/reference/customization.html","id":null,"dir":"Reference","previous_headings":"","what":"Defining custom preparations and checks — customization","title":"Defining custom preparations and checks — customization","text":"Defining custom preparations checks","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/customization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defining custom preparations and checks — customization","text":"","code":"make_prep(name, func)  make_check(description, check, gp, ...)"},{"path":"https://docs.ropensci.org/goodpractice/reference/customization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defining custom preparations and checks — customization","text":"name Name preparation function. func function takes two arguments: path root directory package, logical argument: quiet. quiet true, preparation function may print diagnostic messages. output function saved \" name\" entry state, .e. input  check-functions (see example). description description check. check function takes state argument. gp short description good practice. ... arguments. important: preps argument contains names preparation functions required check.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/customization.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Defining custom preparations and checks — customization","text":"make_prep(): Create preparation function make_check(): Create check function","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/customization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defining custom preparations and checks — customization","text":"","code":"# make a preparation function url_prep <- make_prep(   name = \"desc\",    func = function(path, quiet) desc::description$new(path) ) # and the corresponding check function url_chk <- make_check(   description = \"URL field in DESCRIPTION\",   tags = character(),   preps = \"desc\",   gp = \"have a URL field in DESCRIPTION\",   check = function(state) state$desc$has_fields(\"URL\") ) # use together in gp(): # (note that you have to list the name of your custom check in # the checks-argument as well....) bad1 <- system.file(\"bad1\", package = \"goodpractice\") res <- gp(bad1, checks = c(\"url\", \"no_description_depends\"),           extra_preps = list(\"desc\" = url_prep),           extra_checks = list(\"url\" = url_chk)) #> ℹ Preparing: desc #> ℹ Preparing: description"},{"path":"https://docs.ropensci.org/goodpractice/reference/default_r_file_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Default pattern for R files — default_r_file_pattern","title":"Default pattern for R files — default_r_file_pattern","text":"Default pattern R files","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/default_r_file_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default pattern for R files — default_r_file_pattern","text":"","code":"default_r_file_pattern()"},{"path":"https://docs.ropensci.org/goodpractice/reference/default_r_file_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default pattern for R files — default_r_file_pattern","text":"Regular expression.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/export_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Export failed checks to JSON — export_json","title":"Export failed checks to JSON — export_json","text":"Export failed checks JSON","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/export_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export failed checks to JSON — export_json","text":"","code":"export_json(gp, file, pretty = FALSE)"},{"path":"https://docs.ropensci.org/goodpractice/reference/export_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export failed checks to JSON — export_json","text":"gp gp output. file Output connection file. pretty Whether pretty-print JSON.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of the failed checks — failed_checks","title":"Names of the failed checks — failed_checks","text":"Names failed checks","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of the failed checks — failed_checks","text":"","code":"failed_checks(gp)"},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of the failed checks — failed_checks","text":"gp gp output.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of the failed checks — failed_checks","text":"Names failed checks.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of the failed checks — failed_checks","text":"","code":"path <- system.file(\"bad1\", package = \"goodpractice\") # run a subset of all checks available g <- gp(path, checks = all_checks()[3:16]) #> ℹ Preparing: description #> ℹ Preparing: lintr #> ℹ Preparing: namespace failed_checks(g) #> [1] \"no_description_depends\"       \"no_description_date\"          #> [3] \"description_url\"              \"description_bugreports\"       #> [5] \"lintr_semicolon_linter\"       \"no_import_package_as_a_whole\""},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Positions of check failures in the source code — failed_positions","title":"Positions of check failures in the source code — failed_positions","text":"Note checks refer source code. result NULL.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positions of check failures in the source code — failed_positions","text":"","code":"failed_positions(gp)"},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Positions of check failures in the source code — failed_positions","text":"gp gp output.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Positions of check failures in the source code — failed_positions","text":"list lists positions. See details .","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/failed_positions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Positions of check failures in the source code — failed_positions","text":"ones , results list, one failure. Since check can fail multiple times. single failure list entries: filename, line_number, column_number, ranges. ranges list pairs start end positions line involved check.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/get_marker.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a marker from the positions of a check — get_marker","title":"Get a marker from the positions of a check — get_marker","text":"Get marker positions check","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/get_marker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a marker from the positions of a check — get_marker","text":"","code":"get_marker(gp, check)"},{"path":"https://docs.ropensci.org/goodpractice/reference/get_marker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a marker from the positions of a check — get_marker","text":"gp gp() output check name check extract","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/goodpractice-package.html","id":null,"dir":"Reference","previous_headings":"","what":"goodpractice: Advice on R Package Building — goodpractice-package","title":"goodpractice: Advice on R Package Building — goodpractice-package","text":"Give advice good practices building R packages. Advice includes functions syntax avoid, package structure, code complexity, code formatting, etc.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/goodpractice/reference/goodpractice-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"goodpractice: Advice on R Package Building — goodpractice-package","text":"Maintainer: Mark Padgham mark@ropensci.org (ORCID) Authors: Karina Marks karina.marks@ascent.io (KarinaMarks) Daniel de Bortoli (ddbortoli) Gabor Csardi csardi.gabor@gmail.com Hannah Frick hannah.frick@gmail.com Owen Jones owenjonesuob@gmail.com (owenjonesuob) Hannah Alexander halexander@mango-solutions.com contributors: Ascent Digital Services UK Limited (MangoTheCat) [copyright holder] Ana Simmons ana.simmons@ascent.io (anasimmons) [contributor] Fabian Scheipl (fabian-s) [contributor]","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Run good practice checks — gp","title":"Run good practice checks — gp","text":"see results, just print screen.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run good practice checks — gp","text":"","code":"gp(   path = \".\",   checks = all_checks(),   extra_preps = NULL,   extra_checks = NULL,   quiet = TRUE )"},{"path":"https://docs.ropensci.org/goodpractice/reference/gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run good practice checks — gp","text":"path Path package root. checks Character vector, checks run. Defaults checks. Use all_checks list checks. extra_preps Custom preparation functions. See make_prep creating preparation functions. extra_checks Custom checks. See make_check creating checks. quiet Whether suppress output preparation functions. Note preparation functions produce output, even option set FALSE.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run good practice checks — gp","text":"goodpractice object can query simple API. See results start.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run good practice checks — gp","text":"","code":"path <- system.file(\"bad1\", package = \"goodpractice\") # run a subset of all checks available g <- gp(path, checks = all_checks()[3:16]) #> ℹ Preparing: description #> ℹ Preparing: lintr #> ℹ Preparing: namespace g #> ── GP badpackage ─────────────────────────────────────────────────────────────── #>  #> It is good practice to #>  #>   ✖ not use \"Depends\" in DESCRIPTION, as it can cause name clashes, and poor #>     interaction with other packages. Use \"Imports\" instead. #>   ✖ omit \"Date\" in DESCRIPTION. It is not required and it gets invalid quite #>     often. A build date will be added to the package when you perform `R CMD #>     build` on it. #>   ✖ add a \"URL\" field to DESCRIPTION. It helps users find information about #>     your package online. If your package does not have a homepage, add an URL #>     to GitHub, or the CRAN package package page. #>   ✖ add a \"BugReports\" field to DESCRIPTION, and point it to a bug tracker. #>     Many online code hosting services provide bug trackers for free, #>     https://github.com, https://gitlab.com, etc. #>   ✖ omit trailing semicolons from code lines. They are not needed and most R #>     coding standards forbid them #>  #>     R/semicolons.R:4:30 #>     R/semicolons.R:5:29 #>     R/semicolons.R:9:38 #>  #>   ✖ not import packages as a whole, as this can cause name clashes between the #>     imported packages, especially over time as packages change. Instead, import #>     only the specific functions you need. #> ────────────────────────────────────────────────────────────────────────────────"},{"path":"https://docs.ropensci.org/goodpractice/reference/make_rcmd_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper on make_check, specific to R CMD check — make_rcmd_check","title":"Wrapper on make_check, specific to R CMD check — make_rcmd_check","text":"Wrapper make_check, specific R CMD check","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/make_rcmd_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper on make_check, specific to R CMD check — make_rcmd_check","text":"","code":"make_rcmd_check(   description,   pattern,   gp = NULL,   type = c(\"warnings\", \"notes\", \"errors\"),   tags = NULL,   preps = NULL,   ... )"},{"path":"https://docs.ropensci.org/goodpractice/reference/make_rcmd_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper on make_check, specific to R CMD check — make_rcmd_check","text":"description description check. pattern text pattern identifying check. type Type notification, one \"warnings\", \"notes\" \"errors\". tags Tags passed make_check. preps Preps passed make_check. ... Currently supported.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/package_collate.html","id":null,"dir":"Reference","previous_headings":"","what":"Collate field from DESCRIPTION — package_collate","title":"Collate field from DESCRIPTION — package_collate","text":"NULL returned field.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/package_collate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collate field from DESCRIPTION — package_collate","text":"","code":"package_collate(path = \".\")"},{"path":"https://docs.ropensci.org/goodpractice/reference/package_collate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collate field from DESCRIPTION — package_collate","text":"path Path package root.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/package_collate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collate field from DESCRIPTION — package_collate","text":"Character scalar NULL.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/prep_expressions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all closures from a package — prep_expressions","title":"Extract all closures from a package — prep_expressions","text":"package must extracted working directory, usual.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/prep_expressions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all closures from a package — prep_expressions","text":"","code":"prep_expressions(state, version = NULL, quiet)"},{"path":"https://docs.ropensci.org/goodpractice/reference/prep_expressions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all closures from a package — prep_expressions","text":"state GP state. version Currently ignored.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/prep_expressions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all closures from a package — prep_expressions","text":"modified state, closures named list.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/prep_expressions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract all closures from a package — prep_expressions","text":"can use lintr extract functions, need use code (based similar code functionMap) get right collation order.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/print.goodPractice.html","id":null,"dir":"Reference","previous_headings":"","what":"Print goodpractice results — print.goodPractice","title":"Print goodpractice results — print.goodPractice","text":"Print goodpractice results","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/print.goodPractice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print goodpractice results — print.goodPractice","text":"","code":"# S3 method for class 'goodPractice' print(x, positions_limit = 5, ...)"},{"path":"https://docs.ropensci.org/goodpractice/reference/print.goodPractice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print goodpractice results — print.goodPractice","text":"x Object class goodPractice, returned gp(). positions_limit many positions print . ... Unused, compatibility base::print() generic method.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/r_package_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all source files of a package, in the right order — r_package_files","title":"Get all source files of a package, in the right order — r_package_files","text":"uses Collate entry DESCRIPTION file, one. Otherwise order alphabetical.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/r_package_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all source files of a package, in the right order — r_package_files","text":"","code":"r_package_files(path)"},{"path":"https://docs.ropensci.org/goodpractice/reference/r_package_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all source files of a package, in the right order — r_package_files","text":"path Path root R package.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/r_package_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all source files of a package, in the right order — r_package_files","text":"character vector (relative) file names current collation order.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/results.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all check results in a data frame — results","title":"Return all check results in a data frame — results","text":"Return check results data frame","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all check results in a data frame — results","text":"","code":"results(gp)"},{"path":"https://docs.ropensci.org/goodpractice/reference/results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all check results in a data frame — results","text":"gp gp output.","code":""},{"path":"https://docs.ropensci.org/goodpractice/reference/results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all check results in a data frame — results","text":"Data frame, columns: check name check. result Logical, whether failed .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/goodpractice/reference/results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return all check results in a data frame — results","text":"","code":"path <- system.file(\"bad1\", package = \"goodpractice\") # run a subset of all checks available g <- gp(path, checks = all_checks()[3:16]) #> ℹ Preparing: description #> ℹ Preparing: lintr #> ℹ Preparing: namespace results(g) #>                           check result #> 1        no_description_depends  FALSE #> 2           no_description_date  FALSE #> 3               description_url  FALSE #> 4        description_bugreports  FALSE #> 5       lintr_assignment_linter   TRUE #> 6      lintr_line_length_linter   TRUE #> 7        lintr_semicolon_linter  FALSE #> 8    lintr_attach_detach_linter   TRUE #> 9            lintr_setwd_linter   TRUE #> 10          lintr_sapply_linter   TRUE #> 11 lintr_library_require_linter   TRUE #> 12             lintr_seq_linter   TRUE #> 13 no_import_package_as_a_whole  FALSE #> 14            no_export_pattern   TRUE"},{"path":"https://docs.ropensci.org/goodpractice/news/index.html","id":"goodpractice-1059000-dev-version","dir":"Changelog","previous_headings":"","what":"goodpractice 1.0.5.9000 (dev version)","title":"goodpractice 1.0.5.9000 (dev version)","text":"goodpractice now uses cli, longer depends crayon clisymbols (@olivroy, #167). editor supports , goodpractice now prints clickable hyperlinks console.","code":""},{"path":"https://docs.ropensci.org/goodpractice/news/index.html","id":"goodpractice-105","dir":"Changelog","previous_headings":"","what":"goodpractice 1.0.5","title":"goodpractice 1.0.5","text":"CRAN release: 2024-06-04 New maintainer: rOpenSci Package reinstated CRAN, archiving previous version. CRAN fixes - skipping failing test adding  package Rd Adding docs.ropensci site DESCRIPTION","code":""},{"path":"https://docs.ropensci.org/goodpractice/news/index.html","id":"goodpractice-103","dir":"Changelog","previous_headings":"","what":"goodpractice 1.0.3","title":"goodpractice 1.0.3","text":"CRAN release: 2022-07-13 Additions: Limit cyclomatic complexity check can adjusted using goodpractice.cyclocomp.limit option, default 50 (#132, @fabian-s). number lines printed console check result can set using new positions_limit parameter print() - previously always 5 lines (#130, @fabian-s). GitHub Actions now used CI/CD checks (#145), well calculate code coverage {covr} build package site {pkgdown}. Bugfixes: Documentation custom checks significantly improved (#133, @fabian-s). Year updated LICENSE, LICENSE.md added clarify {goodpractice} uses MIT license (#144).","code":""},{"path":"https://docs.ropensci.org/goodpractice/news/index.html","id":"goodpractice-102-2018-06-14","dir":"Changelog","previous_headings":"","what":"goodpractice 1.0.2 (2018-06-14)","title":"goodpractice 1.0.2 (2018-06-14)","text":"CRAN release: 2018-05-02 First CRAN release. added 2 vignettes added examples added tests added pkgdown site fixed check library/require calls windows wrapped prep steps try","code":""},{"path":"https://docs.ropensci.org/goodpractice/news/index.html","id":"goodpractice-100","dir":"Changelog","previous_headings":"","what":"goodpractice 1.0.0","title":"goodpractice 1.0.0","text":"First public release.","code":""}]
